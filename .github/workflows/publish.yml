name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Verify tests pass (32/32)
      run: |
        pip install -e ".[dev]"
        pytest tests/ -v
    
    - name: Verify performance benchmarks
      run: |
        pip install -e ".[performance]"
        python benchmarks/verify_performance.py
    
    - name: Build package
      run: python -m build
    
    - name: Check distribution
      run: twine check dist/*
    
    - name: Upload to Test PyPI
      if: github.event.inputs.test_pypi == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    - name: Upload to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create GitHub Release Assets
      if: github.event_name == 'release'
      run: |
        # Attach built packages to release
        gh release upload ${{ github.ref_name }} dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify-install:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Wait for PyPI deployment
      run: sleep 60  # Give PyPI time to process
    
    - name: Test fresh install
      run: |
        pip install maple-agents
        python -c "
        from maple import Agent, Message, Config;
        print('âœ… MAPLE installed successfully from PyPI!');
        print('ðŸŽ‰ 32/32 Tests Passed - Production Ready!')
        "
    
    - name: Verify CLI tools
      run: |
        maple --version
        maple-agent --help
        maple-broker --help
